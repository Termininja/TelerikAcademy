#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data;
using System.Linq;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;

using Newtonsoft.Json;
using System.IO;

namespace WeaponsFactory.DataAccess
{
    public partial class WeaponsFactoryModel : OpenAccessContext, IWeaponsFactoryModelUnitOfWork
    {
        private static string connectionStringName = @"WeaponsFactoryMySql";

        private static BackendConfiguration backend = GetBackendConfiguration();

        private static MetadataSource metadataSource = new WeaponsFactoryModelMetadataSource();

        public WeaponsFactoryModel()
            : base(connectionStringName, backend, metadataSource)
        {
            this.UpdateDatabase();
        }

        public WeaponsFactoryModel(string connection)
            : base(connection, backend, metadataSource)
        { }

        public WeaponsFactoryModel(BackendConfiguration backendConfiguration)
            : base(connectionStringName, backendConfiguration, metadataSource)
        { }

        public WeaponsFactoryModel(string connection, MetadataSource metadataSource)
            : base(connection, backend, metadataSource)
        { }

        public WeaponsFactoryModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
            : base(connection, backendConfiguration, metadataSource)
        { }

        public IQueryable<ProductReport> Reports
        {
            get
            {
                return this.GetAll<ProductReport>();
            }
        }

        public static BackendConfiguration GetBackendConfiguration()
        {
            BackendConfiguration backend = new BackendConfiguration();
            backend.Backend = "MySql";
            backend.ProviderName = "MySql.Data.MySqlClient";

            CustomizeBackendConfiguration(ref backend);

            return backend;
        }

        private void UpdateDatabase()
        {
            var schemaHandler = this.GetSchemaHandler();
            EnsureDB(schemaHandler);
        }

        public void DeserializeWeapons()
        {
            JsonSerializer serializer = new JsonSerializer();
            var sales = new List<ProductReport>();

            var jsonFiles = Directory.GetFiles(@"../../../Reports/Json");

            foreach (var file in jsonFiles)
            {
                var fileStream = new FileStream(file, FileMode.Open);
                using (fileStream)
                using (var streamReader = new StreamReader(fileStream))
                {
                    var productReport = JsonConvert.DeserializeObject<ProductReport>(streamReader.ReadToEnd());
                    if (this.Reports.Any(p => p.WeaponId == productReport.WeaponId))
                    {
                        var report = this.Reports.Where(p => p.WeaponId == productReport.WeaponId).First();
                        this.Delete(report);
                        this.SaveChanges();
                    }
                        
                    sales.Add(productReport);
                    
                }
            }

            this.Add(sales.AsQueryable());
            this.SaveChanges();
        }

        public DataTable GetReportsTable()
        {
            var reportsTable = new DataTable();

            reportsTable.Columns.Add("WeaponId", typeof(int));
            reportsTable.Columns.Add("WeaponName", typeof(string));
            reportsTable.Columns.Add("ManufacturerName", typeof(string));
            reportsTable.Columns.Add("Quantity", typeof(int));
            reportsTable.Columns.Add("Income", typeof(decimal));

            foreach (var report in this.Reports)
            {
                reportsTable.Rows.Add(report.WeaponId, report.WeaponName, report.ManufacturerName, report.Quantity, report.Income);
            }

            return reportsTable;
        }

        /// <summary>
        /// Allows you to customize the BackendConfiguration of WeaponsFactoryModel.
        /// </summary>
        /// <param name="config">The BackendConfiguration of WeaponsFactoryModel.</param>
        static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);

        private static void EnsureDB(ISchemaHandler schemaHandler)
        {
            string script = null;
            if (schemaHandler.DatabaseExists())
            {
                script = schemaHandler.CreateUpdateDDLScript(null);
            }
            else
            {
                schemaHandler.CreateDatabase();
                script = schemaHandler.CreateDDLScript();
            }

            if (!string.IsNullOrEmpty(script))
            {
                schemaHandler.ExecuteDDLScript(script);
            }
        }
    }

    public interface IWeaponsFactoryModelUnitOfWork : IUnitOfWork
    {
    }
}
#pragma warning restore 1591
